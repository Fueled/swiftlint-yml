disabled_rules: # rule identifiers to exclude from running
  - force_cast
  - force_try
  - operator_whitespace
  - opening_brace
  - nesting
  - object_literal
  - large_tuple
  - unused_closure_parameter
  - closure_end_indentation
  - valid_docs
  - cyclomatic_complexity
  - trailing_comma
  - function_parameter_count
  - compiler_protocol_init # new rule to discuss for future
  - generic_type_name # new rule to discuss for future
opt_in_rules:
  - empty_count
  - overridden_super_call
  - prohibited_super_call
  - conditional_returns_on_newline
  - closure_spacing
  - switch_case_on_newline
  - private_outlet
  - explicit_init
included: # paths to include during linting. `--path` is ignored if present.
  - .
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
type_body_length:
  warning: 300
  error: 400
line_length:
  warning: 220
  error: 99999 # Default is 200, so swiftlint would output an error if the file length is between 200 and 220
file_length:
  warning: 1000
type_name:
  min_length: 2
trailing_semicolon: error
trailing_comma:
  mandatory_comma: true
  severity: warning
function_body_length:
  warning: 150
  error: 300
statement_position:
  statement_mode: default
  severity: error
colon:
  severity: error
private_outlet:
  severity: warning
  allow_private_set: true
variable_name:
  min_length:
    warning: 3
  max_length:
    warning: 70
    error: 100
  severity: error
  excluded:
    - x
    - y
    - z
    - i
    - j
    - k
    - l
    - id
    - URL
    - r
    - g
    - b
    - a
return_arrow_whitespace: error
opening_brace: error
legacy_constructor: error
legacy_constant: error
leading_whitespace: error
empty_count: warning
shorthand_operator: warning
reporter: "xcode"
custom_rules:
    protocol_conformance:
        name: "Protocol Conformance"
        message: "Protocol conformance should be declared in separate extensions in the same file"
        regex: "(class|struct|extension)[[:space:]]+(?i:(?![^d]*delegate:))[^'\"()<>{},!?:]+:([^'\"<>(){},!?:]+,)+[^'\"<>(){},!?:]*\{"
        match_kinds:
          - keyword
        severity: warning
    computed_property:
        name: "Computed Properties"
        message: "The get clause should be omitted if the computed property is read only"
        regex: "var[[:space:]]+[^:]+:[^{]*\{[[:space:]]*get[[:space:]]*\{[^}]+\}(?![[:space:]]*set)"
        match_kinds:
          - keyword
        severity: warning
    swift_generic_syntax:
        name: "Swift Generic Syntax"
        message: "Prefer using swift's syntactic sugars rather than using the generic syntax"
        regex: "(Array|Dictionary|Optional)(<[^'\"<>(){},!?:]+>|\(((array|dictionary)Literal|(?i:(?!.*\.\.(\.|<))[^$a-z'\"<>(){},!?:]*\))))"
        match_kinds:
          - identifier
          - typeidentifier
        severity: error
    indentation_character:
        name: "Indentation"
        message: "Tabs should be used rather than spaces. This error may not be displayed exactly at the location of the violation but just above it."
        regex: "[^\n]*\n+ +"
        severity: error
    consecutive_new_lines:
        name: "New Lines"
        message: "There shouldn't be more than one consecutive empty line. This error may not be displayed exactly at the location of the violation but just above it."
        regex: "([^\n]*\n){1,4}?(?:\n[[:blank:]]*)+\n"
        severity: error
    opening_brace:
        name: "Opening brace"
        message: "Opening braces should be preceded by a single space and on the same line as the declaration, or optionally on a new line if the statement is multiline."
        regex: "(?<=\s)(?<!#)(?:(?:(?#Edge case keywords)let|var)[^=]+=(?:|[[:blank:]]{2,}|\s+\n\s*)\{|(?:(?#Keywords that can be followed by a multiline contruct)switch|func|if|guard|while)\s+(?:(?#Multiline construct)(?:[^\n]*\}[[:blank:]]*\)*)(?:[^{\n]+else)?(?=\s*\{)[[:blank:]]*+(?:\n\s*| {2,})\{|(?#Single construct)(?:.*\}[[:blank:]]*\)*)(?:[^{]+else)?(?=\s*\{)(?:\n| ){2,}\{|[^{\n]*(?:[^\n{]+else)?(?=\s*\{)(?:\n\s*| {2,})\{)|(?:(?#Keywords that should always be strictly single line)deinit|case|do|for|enum|catch|init|subscript|get|set|willSet|didSet|repeat|struct|class|extension|catch|protocol)[^\n{]*(?<![[:blank:]])(?:\n\s*| {2,})?\{)"
        match_kinds:
          - keyword
        severity: error
    nested_self_usage:
        name: "Nested .self usage"
        message: ".self shouldn't be used more than once on a given statement"
        regex: "(?<!\")self\.(?:\p{L}+\.)*self"
        severity: warning
