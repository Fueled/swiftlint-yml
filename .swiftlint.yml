disabled_rules: # rule identifiers to exclude from running
  - force_cast
  - force_try
  - operator_whitespace
  - opening_brace
  - nesting
  - large_tuple
  - cyclomatic_complexity
opt_in_rules:
  - empty_count
  - conditional_returns_on_newline
  - closure_spacing
  - switch_case_on_newline
  - nimble_operator
  - private_outlet
  - overridden_super_call
  - prohibited_super_call
  - operator_usage_whitespace
  - first_where
  - explicit_init
included: # paths to include during linting. `--path` is ignored if present.
  - .
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
type_body_length:
  warning: 300
  error: 400
line_length:
  warning: 220
  error: 9999
file_length:
  warning: 1000
  error: 1500
type_name:
  min_length: 2
trailing_semicolon: error
trailing_comma:
  mandatory_comma: true
  severity: warning
function_body_length:
  warning: 150
  error: 300
variable_name:
  min_length:
    warning: 3
  max_length:
    warning: 70
    error: 100
  severity: error
  excluded:
    - x
    - y
    - z
    - i
    - j
    - k
    - l
    - id
    - URL
    - r
    - g
    - b
    - a
return_arrow_whitespace: error
opening_brace: error
legacy_constructor: error
legacy_constant: error
leading_whitespace: error
conditional_returns_on_newline: error
colon:
  severity: error
private_outlet:
  severity: error
  allow_private_set: true
empty_count: warning
nesting: error
valid_docs: error
explicit_init: error
first_where: warning
operator_usage_whitespace: error
prohibited_super_call:
  severity: error
overridden_super_call:
  severity: error
number_separator:
  severity: error
nimble_operator: warning
switch_case_on_newline: error
closure_spacing: error
reporter: "xcode"
custom_rules:
  copyright:
    name: "Fueled Copyright"
    message: "Copyright should be Fueled"
    regex: "(?i:copyright)\s+\(c\)\s+\d+\s+(?i:(?!fueled))"
    match_kinds:
      - comment
    severity: warning
  protocol_conformance:
    name: "Protocol Conformance"
    message: "Protocol conformance should be declared in separate extensions in the same file"
    regex: "(class|struct|extension)[[:space:]]+(?i:(?![^d]*delegate:))[^'\"()<>{},!?:]+:([^'\"<>(){},!?:]+,)+[^'\"<>(){},!?:]*\{"
    match_kinds:
      - keyword
    severity: warning
  swift_generic_syntax:
    name: "Swift Generic Syntax"
    message: "Prefer using swift's syntactic sugars rather than using the generic syntax"
    regex: "(Array|Dictionary|Optional)(<[^'\"<>(){},!?:]+>|\(((array|dictionary)Literal|(?i:(?!.*\.\.(\.|<))[^$a-z'\"<>(){},!?:]*\))))"
    match_kinds:
      - identifier
      - typeidentifier
    severity: error
  indentation_character:
    name: "Indentation"
    message: "Tabs should be used rather than spaces. This error may not be displayed exactly at the location of the violation but just above it."
    regex: "([^\n]*\n+|[^\t]*\t+) {2,}"
    severity: error
  opening_brace:
    name: "Opening brace"
    message: "Opening braces should be preceded by a single space and on the same line as the declaration, or optionally on a new line if the statement is multiline."
    regex: "(?<=\s)(?<!#)(?:(?:(?#Edge case keywords)let|var)[^=]+=(?:|[[:blank:]]{2,}|\s+\n\s*)\{|(?:(?#Keywords that can be followed by a multiline contruct)switch|func|if|guard|while)\s+(?:(?#Multiline construct)(?:[^\n]*\}[[:blank:]]*\)*)(?:[^{\n]+else)?(?=\s*\{)[[:blank:]]*+(?:\n\s*| {2,})\{|(?#Single construct)(?:.*\}[[:blank:]]*\)*)(?:[^{]+else)?(?=\s*\{)(?:\n| ){2,}\{|[^{\n]*(?:[^\n{]+else)?(?=\s*\{)(?:\n\s*| {2,})\{)|(?:(?#Keywords that should always be strictly single line)deinit|case|do|for|enum|catch|init|subscript|get|set|willSet|didSet|repeat|struct|class|extension|catch|protocol)[^\n{]*(?<![[:blank:]])(?:\n\s*| {2,})?\{)"
    match_kinds:
      - keyword
    severity: error
  nested_self_usage:
    name: "Nested .self usage"
    message: ".self shouldn't be used more than once on a given statement"
    regex: "(?<!\")self\.(?:\p{L}+\.)*self"
    severity: warning
